// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package database

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  user_id, message_text, message_type
) VALUES (
  $1, $2, $3
)
RETURNING message_id, user_id, message_text, message_type, created_at
`

type CreateMessageParams struct {
	UserID      int32
	MessageText string
	MessageType string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.UserID, arg.MessageText, arg.MessageType)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.MessageText,
		&i.MessageType,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_name, user_role, email, password
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_id, user_name, user_role, email, password, created_at
`

type CreateUserParams struct {
	UserName string
	UserRole string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.UserRole,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserRole,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE message_id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, messageID int64) error {
	_, err := q.db.Exec(ctx, deleteMessage, messageID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT message_id, user_id, message_text, message_type, created_at FROM messages
WHERE message_id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, messageID int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, messageID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.MessageText,
		&i.MessageType,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, user_role, email, password, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserRole,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT message_id, user_id, message_text, message_type, created_at FROM messages
ORDER BY created_at desc
`

func (q *Queries) ListMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.Query(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.UserID,
			&i.MessageText,
			&i.MessageType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
